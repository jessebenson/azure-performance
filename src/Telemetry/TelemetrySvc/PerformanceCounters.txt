Interesting performance counters.  Format:

<Category>: <Category help>
	[Instance name]
- <Counter name>: <Counter help>


System: The System performance object consists of counters that apply to more than one instance of a component processors on the computer.
- Threads: Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  A thread is the basic executable entity that can execute instructions in a processor.
- Processes: Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Each process represents the running of a program.
- System Up Time: System Up Time is the elapsed time (in seconds) that the computer has been running since it was last started.  This counter displays the difference between the start time and the current time.

Processor: The Processor performance object consists of counters that measure aspects of processor activity. The processor is the part of the computer that performs arithmetic and logical computations, initiates operations on peripherals, and runs the threads of processes.  A computer can have multiple processors.  The processor object represents each processor as an instance of the object.
	_Total
- % Processor Time: % Processor Time is the percentage of elapsed time that the processor spends to execute a non-Idle thread. It is calculated by measuring the percentage of time that the processor spends executing the idle thread and then subtracting that value from 100%. (Each processor has an idle thread that consumes cycles when no other threads are ready to run). This counter is the primary indicator of processor activity, and displays the average percentage of busy time observed during the sample interval. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock (10ms). On todays fast processors, % Processor Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example  of applications  which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.
- % User Time: % User Time is the percentage of elapsed time the processor spends in the user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems.  The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory.  The operating system switches application threads to privileged mode to access operating system services. This counter displays the average busy time as a percentage of the sample time.

Thread: The Thread performance object consists of counters that measure aspects of thread behavior.  A thread is the basic object that executes instructions on a processor.  All running processes have at least one thread.

LogicalDisk: The Logical Disk performance object consists of counters that monitor logical partitions of a hard or fixed disk drives.  Performance Monitor identifies logical disks by their a drive letter, such as C.
	_Total
- % Free Space: % Free Space is the percentage of total usable space on the selected logical disk drive that was free.
- Free Megabytes: Free Megabytes displays the unallocated space, in megabytes, on the disk drive in megabytes. One megabyte is equal to 1,048,576 bytes.
- Disk Reads/sec: Disk Reads/sec is the rate of read operations on the disk.
- Disk Writes/sec: Disk Writes/sec is the rate of write operations on the disk.
- Disk Read Bytes/sec: Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.
- Disk Write Bytes/sec: Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.
- Avg. Disk sec/Read: Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk.
- Avg. Disk sec/Write: Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk.
- Avg. Disk Queue Length: Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.
- Avg. Disk Read Queue Length: Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval.
- Avg. Disk Write Queue Length: Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval.

PhysicalDisk: The Physical Disk performance object consists of counters that monitor hard or fixed disk drive on a computer.  Disks are used to store file, program, and paging data and are read to retrieve these items, and written to record changes to them.  The values of physical disk counters are sums of the values of the logical disks (or partitions) into which they are divided.
	_Total
- Disk Reads/sec: Disk Reads/sec is the rate of read operations on the disk.
- Disk Writes/sec: Disk Writes/sec is the rate of write operations on the disk.
- Disk Read Bytes/sec: Disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations.
- Disk Write Bytes/sec: Disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations.
- Avg. Disk sec/Read: Avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk.
- Avg. Disk sec/Write: Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk.
- Avg. Disk Queue Length: Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.
- Avg. Disk Read Queue Length: Avg. Disk Read Queue Length is the average number of read requests that were queued for the selected disk during the sample interval.
- Avg. Disk Write Queue Length: Avg. Disk Write Queue Length is the average number of write requests that were queued for the selected disk during the sample interval.

Memory: The Memory performance object  consists of counters that describe the behavior of physical and virtual memory on the computer.  Physical memory is the amount of random access memory on the computer.  Virtual memory consists of the space in physical memory and on disk.  Many of the memory counters monitor paging, which is the movement of pages of code and data between disk and physical memory.  Excessive paging, a symptom of a memory shortage, can cause delays which interfere with all system processes.
- Available Bytes: Available Bytes is the amount of physical memory, in bytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists.
- Committed Bytes: Committed Bytes is the amount of committed virtual memory, in bytes. Committed memory is the physical memory which has space reserved on the disk paging file(s). There can be one or more paging files on each physical drive. This counter displays the last observed value only; it is not an average.
- Available MBytes: Available MBytes is the amount of physical memory, in Megabytes, immediately available for allocation to a process or for system use. It is equal to the sum of memory assigned to the standby (cached), free and zero page lists.

Network Interface: The Network Interface performance object consists of counters that measure the rates at which bytes and packets are sent and received over a network connection.  It includes counters that monitor connection errors.
	<network interface>
- Bytes Total/sec: Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters. Network Interface\Bytes Total/sec is a sum of Network Interface\Bytes Received/sec and Network Interface\Bytes Sent/sec.
- Bytes Received/sec: Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters. Network Interface\Bytes Received/sec is a subset of Network Interface\Bytes Total/sec.
- Bytes Sent/sec: Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters. Network Interface\Bytes Sent/sec is a subset of Network Interface\Bytes Total/sec.
- Packets/sec: Packets/sec is the rate at which packets are sent and received on the network interface.
- Packets Received/sec: Packets Received/sec is the rate at which packets are received on the network interface.
- Packets Sent/sec: Packets Sent/sec is the rate at which packets are sent on the network interface.
- Current Bandwidth: Current Bandwidth is an estimate of the current bandwidth of the network interface in bits per second (BPS).  For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this value is the nominal bandwidth.

.NET CLR Memory: Counters for CLR Garbage Collected heap.
	_Global_
- % Time in GC: % Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average.
- Allocated Bytes/sec: This counter displays the rate of bytes per second allocated on the GC Heap. This counter is updated at the end of every GC; not at each allocation. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.
- Gen 0 heap size: This counter displays the maximum bytes that can be allocated in generation 0 (Gen 0); its does not indicate the current number of bytes allocated in Gen 0. A Gen 0 GC is triggered when the allocations since the last GC exceed this size. The Gen 0 size is tuned by the Garbage Collector and can change during the execution of the application. At the end of a Gen 0 collection the size of the Gen 0 heap is infact 0 bytes; this counter displays the size (in bytes) of allocations that would trigger the next Gen 0 GC. This counter is updated at the end of a GC; its not updated on every allocation.
- Gen 1 heap size: This counter displays the current number of bytes in generation 1 (Gen 1); this counter does not display the maximum size of Gen 1. Objects are not directly allocated in this generation; they are promoted from previous Gen 0 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
- Gen 2 heap size: This counter displays the current number of bytes in generation 2 (Gen 2). Objects are not directly allocated in this generation; they are promoted from Gen 1 during previous Gen 1 GCs. This counter is updated at the end of a GC; its not updated on every allocation.
- Large Object Heap size: This counter displays the current size of the Large Object Heap in bytes. Objects greater than a threshold are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. In CLR v1.1 and above this threshold is equal to 85000 bytes. This counter is updated at the end of a GC; it's not updated on every allocation.
- # Gen 0 Collections: This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
- # Gen 1 Collections: This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.
- # Gen 2 Collections: This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.

.NET CLR LocksAndThreads: Stats for CLR Locks and Threads.
	_Global_
- Total # of Contentions: This counter displays the total number of times threads in the CLR have attempted to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
- Contention Rate / sec: Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.
- Current Queue Length: This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value.
- # of current logical Threads: This counter displays the number of current .NET thread objects in the application. A .NET thread object is created either by new System.Threading.Thread or when an unmanaged thread enters the managed environment. This counters maintains the count of both running and stopped threads. This counter is not an average over time; it just displays the last observed value.
- # of current physical Threads: This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process.

.NET CLR Exceptions: Runtime statistics on CLR exception handling.
	_Global_
- # of Exceps Thrown: This counter displays the total number of exceptions thrown since the start of the application. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions that are re-thrown would get counted again. Exceptions should only occur in rare situations and not in the normal control flow of the program.
- # of Exceps Thrown / sec: This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (>100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.

Synchronization: The Synchronization performance object consists of counters for kernel synchronization. The synchronization object represents each processor as an instance of the object.
	_Total
- Spinlock Acquires/sec: Spinlock acquires/sec is the rate of spinlock acquisitions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks acquisitions.
- Spinlock Contentions/sec: Spinlock contentions/sec is the rate of spinlock contentions. It includes the basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks contentions.
- Spinlock Spins/sec: Spinlock spins/sec is the rate of spinlock spins. It includes the spins to acquire basic spinlocks, queued spinlocks, in-stack queued spinlocks, and shared spinlocks.

Process: The Process performance object consists of counters that monitor running application program and system processes.  All the threads in a process share the same address space and have access to the same data.
	_Total
- % Processor Time: % Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.
- Virtual Bytes: Virtual Bytes is the current size, in bytes, of the virtual address space the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and the process can limit its ability to load libraries.
- Working Set: Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.
- Thread Count: The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.
- Handle Count: The total number of handles currently open by this process. This number is equal to the sum of the handles currently open by each thread in this process.
- Elapsed Time: The total elapsed time, in seconds, that this process has been running.
- IO Read Operations/sec: The rate at which the process is issuing read I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
- IO Write Operations/sec: The rate at which the process is issuing write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
- IO Data Operations/sec: The rate at which the process is issuing read and write I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
- IO Read Bytes/sec: The rate at which the process is reading bytes from I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
- IO Write Bytes/sec: The rate at which the process is writing bytes to I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.
- IO Data Bytes/sec: The rate at which the process is reading and writing bytes in I/O operations. This counter counts all I/O activity generated by the process to include file, network and device I/Os.

IPv4: The IP performance object consists of counters that measure the rates at which IP datagrams are sent and received by using IP protocols.  It also includes counters that monitor IP protocol errors.

TCPv6: The TCP performance object consists of counters that measure the rates at which TCP Segments are sent and received by using the TCP protocol.  It includes counters that monitor the number of TCP connections in each TCP connection state.
- Connections Established: Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.
- Connections Active: Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state. In other words, it shows a number of connections which are initiated by the local computer. The value is a cumulative total.
- Connections Passive: Connections Passive is the number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state. In other words, it shows a number of connections to the local computer, which are initiated by remote computers. The value is a cumulative total.
- Connection Failures: Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.
- Connections Reset: Connections Reset is the number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.

ASP.NET: ASP.NET global performance counters
- Application Restarts: Number of times the application has been restarted during the web server's lifetime.
- Applications Running: Number of currently running web applications.
- Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
- Request Execution Time: The number of milliseconds that it took to execute the most recent request.
- Requests Rejected: The number of requests rejected because the request queue was full.
- Requests Queued: The number of requests waiting to be processed.
- Worker Processes Running: Number of worker processes running on the machine.
- Worker Process Restarts: Number of times a worker process has restarted on the machine.
- Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.
- State Server Sessions Active: The current number of sessions currently active.
- State Server Sessions Abandoned: The number of sessions that have been explicitly abandoned.
- State Server Sessions Timed Out: The number of sessions timed out.
- State Server Sessions Total: The number of sessions total.
- Requests Current: The current number of requests, including those that are queued, currently executing, or waiting to be written to the client.  Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.
- Audit Success Events Raised: Number of audit successes in the application since it was started.
- Audit Failure Events Raised: Number of audit failures in the application since it was started.
- Error Events Raised: Number of error events raised since the application was started.
- Request Error Events Raised: Number of runtime error events raised since the application was started.
- Infrastructure Error Events Raised: Number of HTTP error events raised since the application was started.
- Requests In Native Queue: Requests queued because the concurrency limits have been exceeded.

ASP.NET Applications: ASP.NET application performance counters
	__Total
- Anonymous Requests: Number of requests utilizing anonymous authentication.
- Anonymous Requests/Sec: Number of Authentication Anonymous Requests/Sec
- Errors During Execution: Number of errors that have occurred during the processing of a request.
- Errors Unhandled During Execution: Number of errors not handled by user code, but by the default error handler.
- Errors Unhandled During Execution/Sec: Rate of unhandled errors.
- Errors Total: Total number of errors occurred.
- Errors Total/Sec: Rate of errors occurred.
- Request Bytes In Total: The total size, in bytes, of all requests.
- Request Bytes Out Total: The total size, in bytes, of responses sent to a client.  This does not include standard HTTP response headers.
- Requests Executing: The number of requests currently executing.
- Requests Failed: Total number of failed requests.
- Requests Not Found: The number of requests for resources that were not found.
- Requests Not Authorized: Number of requests failed due to unauthorized access.
- Requests In Application Queue: The number of requests in the application request queue.
- Requests Timed Out: The number of requests that timed out.
- Requests Succeeded: The number of requests that executed successfully.
- Requests Total: The total number of requests since the application was started.
- Requests/Sec: The number of requests executed per second.
- Sessions Active: The current number of sessions currently active.
- Sessions Abandoned: The number of sessions that have been explicitly abandoned.
- Sessions Timed Out: The number of sessions timed out.
- Sessions Total: Total number of sessions since the application was started.
- Events Raised: Total number of instrumentation events raised since the application was started.
- Events Raised/Sec: Total number of instrumentation events per second.
- Application Lifetime Events: Number of application events raised since the application was started.
- Application Lifetime Events/Sec: Number of application events raised per second.
- Error Events Raised: Number of error events raised since the application was started.
- Error Events Raised/Sec: Number of error events per second.
- Request Error Events Raised: Number of runtime error events raised since the application was started.
- Request Error Events Raised/Sec: Number of runtime error events per second.
- Request Events Raised: Number of request events raised since the application was started
- Request Events Raised/Sec: Number of request events raised per second.
- Request Execution Time: The number of milliseconds that it took to execute the most recent request.
- Requests Disconnected: The number of requests disconnected due to communication errors or user terminated.
- Requests Rejected: The number of requests rejected because the application request queue was full.
- Request Wait Time: The number of milliseconds the most recent request was waiting in the queue.

Objects: The Object performance object consists of counters that monitor  logical objects in the system, such as processes, threads, mutexes, and semaphores.  This information can be used to detect the unnecessary consumption of computer resources.  Each object requires memory to store basic information about the object.
- Processes: Processes is the number of processes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Each process represents the running of a program.
- Threads: Threads is the number of threads in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  A thread is the basic executable entity that can execute instructions in a processor.
- Events: Events is the number of events in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  An event is used when two or more threads try to synchronize execution.
- Semaphores: Semaphores is the number of semaphores in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Threads use semaphores to obtain exclusive access to data structures that they share with other threads.
- Mutexes: Mutexes counts the number of mutexes in the computer at the time of data collection. This is an instantaneous count, not an average over the time interval.  Mutexes are used by threads to assure only one thread is executing a particular section of code.

Processor Information: The Processor Information performance counter set consists of counters that measure aspects of processor activity. The processor is the part of the computer that performs arithmetic and logical computations, initiates operations on peripherals, and runs the threads of processes. A computer can have multiple processors. On some computers, processors are organized in NUMA nodes that share hardware resources such as physical memory. The Processor Information counter set represents each processor as a pair of numbers, where the first number is the NUMA node number and the second number is the zero-based index of the processor within that NUMA node. If the computer does not use NUMA nodes, the first number is zero.
	_Total
- % Processor Time: % Processor Time is the percentage of elapsed time that the processor spends to execute a non-Idle thread. It is calculated by measuring the percentage of time that the processor spends executing the idle thread and then subtracting that value from 100%. (Each processor has an idle thread to which time is accumulated when no other threads are ready to run). This counter is the primary indicator of processor activity, and displays the average percentage of busy time observed during the sample interval. It should be noted that the accounting calculation of whether the processor is idle is performed at an internal sampling interval of the system clock tick. On todays fast processors, % Processor Time can therefore underestimate the processor utilization as the processor may be spending a lot of time servicing threads between the system clock sampling interval. Workload based timer applications are one example  of applications  which are more likely to be measured inaccurately as timers are signaled just after the sample is taken.
- Processor Frequency: Processor Frequency is the frequency of the current processor in megahertz. Some processors are capable of regulating their frequency outside of the control of Windows. Processor Frequency will not accurately reflect actual processor frequency on these systems. Use % Processor Performance instead.
- % Processor Performance: Processor Performance is the average performance of the processor while it is executing instructions, as a percentage of the nominal performance of the processor. On some processors, Processor Performance may exceed 100%. Some processors are capable of regulating their frequency outside of the control of Windows. Processor Performance will accurately reflect the performance of these processors.

Service Fabric Replicator: Counters for Replicator Component
- # Bytes Replication Queue: Counter for measuring the size of virtual memory (in bytes) currently occupied by the Replication Queue
- # Operations Replication Queue: Counter for measuring the number of operations in the Replication Queue
- Avg. Commit ms/Operation: Counter for measuring the average time for each operation in the replication queue to get committed. On a Primary Replica, Commit time is the time taken to recieve an acknowledgement for an operation from a quorum of secondaries. On a Secondary Replica, Commit time is the time needed to dispatch an operation to the service
- Avg. Complete ms/Operation: Counter for measuring the average time for each operation in the replication queue to get completed. On a Primary Replica, Complete time is the time taken to recieve an acknowledgement for an operation from ALL the secondaries. On a Secondary Replica, Complete time is the time taken by the service to acknowledge the operation
- Avg. Cleanup ms/Operation: Base Counter for measuring the average time for each operation in the replication queue to get released and freed
- % Replication Queue Usage: Counter for measuring the percentage of Replication Queue being consumed
- Current Role: Counter indicating the current role of the replicator. 0 is Unknown, 1 is None, 2 is Primary, 3 is Idle Secondary and 4 is Active Secondary.
- Enqueued Operations/Sec: Counter indicating the number of enqueued ops/sec
- Enqueued Bytes/Sec: Counter indicating the number of enqueued bytes/sec

Service Fabric Transactional Replicator: Counters for Service Fabric Transactional Replicator.
- Begin Txn Operations/sec: The number of BeginTransaction operations initiated per second.
- Txn Operations/sec: The number of Add operations initiated commit per second.
- Commit Txns/sec: The number of transaction commits initiated per second.
- Abort Txns/sec: The number of transaction aborts initiated per second.
- Atomic Operations/sec: The number of Add atomic (with and without redo) operations initiated commit per second.
- # Inflight visibility sequence numbers: The current number of inflight visibility sequence numbers.
- # Checkpoints: The total number of perform checkpoints initiated.
- Last State Manager Recovery duration seconds: Duration for the State Manager to recover the checkpoint state of all state providers in the replica
- Last Log Recovery duration seconds: Duration for the Replicator to recover the transactions in the log
- Incoming Bytes/sec: The number of incoming bytes to the replicator per second.
- Log Flush Bytes/sec: The number of bytes being flushed to the disk by the replicator per second.
- Log Flush Records/sec: The number of log records being flushed to the disk by the replicator per second.
- Throttled Operations/sec: The number of operations rejected every second by the replicator due to throttling.
- Number of bytes flushed per IO: The number of bytes flushed in every IO.
- Avg. Transaction ms/Commit: Average Commit Latency per transaction

Service Fabric Actor Method: Counters for methods implemented by Service Fabric actor services
- Invocations/Sec: Number of times the actor service method is invoked per second
- Average milliseconds per invocation: Time taken to execute the actor service method in milliseconds
- Exceptions thrown/Sec: Number of times the actor service method threw an exception per second
